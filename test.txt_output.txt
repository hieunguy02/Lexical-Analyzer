Lexemes:    Tokens:
$   Separator
<Rat24S> ::= $ <Opt Function Definitions> $ <Opt Declaration List> $ <Statement List> $
<Opt Function Definitions> ::= <Function Definitions>
<Function Definitions> ::= <Function> <Function Definitions Prime>
function   Keyword
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
convertx   Identifier
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
(   Separator
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
<DeclarationList> ::= <Declaration> <DeclarationListPrime>
integer   Keyword
<Parameter> ::= <Qualifier> <IDs> 
<Qualifier> ::= integer 
fahr   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <Epsilon>
<Opt Declaration List Prime> ::= <Epsilon>
<Opt Declaration List> ::= <Declaration List>
)   Separator
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
<Opt Declaration List> ::= <Epsilon>
{   Separator
<Body> ::= { < Statement List> } 
<Statement List> ::= <Statement><StatementListPrime> 
<Statement> ::= <Return> 
return   Keyword
<return> ::= <return> <returnPrime>
<returnPrime> ::= <Expression>
<Expression> ::= <Term> <Expression> 
<Term> ::= <Term> <TermPrime> 
5   Integer
<Primary> ::= <Integer> 
<Factor> ::= <Primary>
*   Operator
<Term Prime> ::= * <Factor> <Term Prime> 
(   Separator
<Primary> ::=  (<Expression>) 
<Expression> ::= <Term> <Expression> 
<Term> ::= <Term> <TermPrime> 
fahr   Identifier
<Primary> ::= <Identifier> 
<Factor> ::= <Primary>
<Term Prime> ::= <Epsilon> 
-   Operator
<Expression Prime> ::= - <Term> <Expression Prime> 
<Term> ::= <Term> <TermPrime> 
32   Integer
<Primary> ::= <Integer> 
<Factor> ::= <Primary>
<Term Prime> ::= <Epsilon> 
)   Separator
<Term Prime> ::= <Epsilon> 
<Primary> ::= (<Expression>) 
<Factor> ::= <Primary>
/   Operator
<Term Prime> ::= / <Factor> <Term Prime> 
9   Integer
<Primary> ::= <Integer> 
<Factor> ::= <Primary>
<Term Prime> ::= <Epsilon> 
}   Separator
<Term Prime> ::= <Epsilon> 
<Statement List> ::= Epsilon 
}   Separator
<Body> ::= { < Statement List> } 
<Function Definitions Prime> ::= <Epsilon>
$   Separator
<DeclarationList> ::= <Declaration> <DeclarationListPrime>
integer   Keyword
<Parameter> ::= <Qualifier> <IDs> 
<Qualifier> ::= integer 
low   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <IDs>
high   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <IDs>
step   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <Epsilon>
;   Separator
<Opt Declaration List Prime> ::= <Epsilon>
<Opt Declaration List> ::= <Declaration List>
$   Separator
<Statement List> ::= <Statement><StatementListPrime> 
<Statement> ::= <while> 
while   Keyword
<While> ::= while ( <Condition> ) <Statement> endwhile 
(   Separator
<While> ::= while ( <Condition> ) <Statement> endwhile 
<Condition> ::= <Expression> <Relop> <Expression> 
<Expression> ::= <Term> <Expression> 
<Term> ::= <Term> <TermPrime> 
a   Identifier
<Primary> ::= <Identifier> 
<Factor> ::= <Primary>
<Term Prime> ::= <Epsilon> 
<   Operator
<Term Prime> ::= <Epsilon> 
<   Operator
<Relop> ::= == | != | > | < | <= | =>
<Expression> ::= <Term> <Expression> 
<Term> ::= <Term> <TermPrime> 
b   Identifier
<Primary> ::= <Identifier> 
<Factor> ::= <Primary>
<Term Prime> ::= <Epsilon> 
)   Separator
<Term Prime> ::= <Epsilon> 
)   Separator
<While> ::= while ( <Condition> ) <Statement> endwhile 
<Statement> ::= <Compound> 
{   Separator
<Compound> ::= { <Statement List> } 
<Statement List> ::= <Statement><StatementListPrime> 
<Statement> ::= <Scan> 
scan   Keyword
 <Scan> ::= scan ( <IDs> ); 
(   Separator
 <Scan> ::= scan ( <IDs> ); 
low   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <IDs>
high   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <IDs>
step   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <Epsilon>
)   Separator
<Scan> ::= scan ( <IDs> ); 
;   Separator
<Scan> ::= scan ( <IDs> ); 
<Statement List Prime> ::= <Statement List> 
<Statement List> ::= <Statement><StatementListPrime> 
<Statement> ::= <Print> 
print   Keyword
 <Print> ::= print ( <Expression>); 
(   Separator
 <Print> ::= print ( <Expression>); 
<Expression> ::= <Term> <Expression> 
<Term> ::= <Term> <TermPrime> 
convertx   Identifier
<Primary> ::= <Identifier> 
(   Separator
<Primary> ::= <Identifier> (<IDs>) 
low   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <Epsilon>
)   Separator
<Primary> ::= <Identifier> (<IDs>) 
<Factor> ::= <Primary>
<Term Prime> ::= <Epsilon> 
)   Separator
<Term Prime> ::= <Epsilon> 
)   Separator
 <Print> ::= print ( <Expression>); 
;   Separator
 <Print> ::= print ( <Expression>); 
<Statement List Prime> ::= <Statement List> 
<Statement List> ::= <Statement><StatementListPrime> 
<Statement> ::= <Assign> 
c   Identifier
 <Assign> ::= <Identifier> = <Expression> ; 
=   Operator
 <Assign> ::= <Identifier> = <Expression> ;
<Expression> ::= <Term> <Expression> 
<Term> ::= <Term> <TermPrime> 
a   Identifier
<Primary> ::= <Identifier> 
<Factor> ::= <Primary>
<Term Prime> ::= <Epsilon> 
+   Operator
<Expression Prime> ::= + <Term> <Expression Prime> 
<Term> ::= <Term> <TermPrime> 
true   Keyword
<Primary> ::= <true> 
<Factor> ::= <Primary>
<Term Prime> ::= <Epsilon> 
;   Separator
<Term Prime> ::= <Epsilon> 
;   Separator
 <Assign> ::= <Identifier> = <Expression> ;
<Statement List> ::= Epsilon 
}   Separator
<Compound> ::= { <Statement List> } 
endwhile   Keyword
<While> ::= while ( <Condition> ) <Statement> endwhile 
<Statement List Prime> ::= <Statement List> 
<Statement List> ::= <Statement><StatementListPrime> 
<Statement> ::= <Scan> 
scan   Keyword
 <Scan> ::= scan ( <IDs> ); 
(   Separator
 <Scan> ::= scan ( <IDs> ); 
low   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <IDs>
high   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <IDs>
step   Identifier
<IDs> ::= <Identifier> <IDsPrime>
<IDsPrime> ::= <Epsilon>
)   Separator
<Scan> ::= scan ( <IDs> ); 
;   Separator
<Scan> ::= scan ( <IDs> ); 
<Statement List> ::= Epsilon 
$   Separator
